rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
import(rstudioapi)
addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
import(rstudioapi)
devtools::install_github("rstudio/rstudioapi")
clear
clear all()
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages(rstudioapi)
install.packages(
"rsthemes",
repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption("repos"))
)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
py_module_available('spacy')
library(reticulate)
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_install('spacy')
py_module_available('spacy')
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311/python.exe')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311/python.exe')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install.packages('reticulate')
library(reticulate)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_install('spacy')
py_module_available('spacy')
py_available()
py_module_available('spacy')
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install.packages('reticulate')
library(reticulate)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_available()
py_module_available('spacy')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_condaenv("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_config()
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
conda_create("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_available()
py_config()
py_module_available('spacy')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
remove.packages(reticulate)
remove.packages('reticulate')
install.packages('reticulate)
install.packages('reticulate')
install.packages("reticulate")
library(reticulate)
library(reticulate)
install("rstudioapi")
install.packages('rstudioapi')
library(rstudioapi)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages('easyPubMed')
install.packages('spacyr')
install.packages('rstudioapi')
install.packages(easyPubMed)
install.packages('easyPubMed')
install.packages('spacyr')
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages('reticulate')
devtools::install_github(username/repo_name
devtools::install_github(dandycodingpipe)
library(devtools)
install.packages(devtools)
install.packages(devtools')
install.packages('devtools')
devtools::install_github(dandycodingpipe/KAFtool)
devtools::install_github("dandycodingpipe/KAFtool")
load("~/Systox/.gitignore")
setwd("C:/Users/Chris/OneDrive/2020-2022/Personal Documents/My Stuff/Systox")
Sys.Date()
Sys.Date()%Y
Sys.Date()
format(Sys.Date(),"%Y")
1950:5:current_year
current_year <- format(Sys.Date(),"%Y")
1950:5:current_year
increments <- seq(1950,current_year, 5)
increments <- seq(1950,current_year, by = 5)
increments
print(increments[i])
for(i in increments ){
print(increments[i])
}
for(i in increments ){
print(i)
}
print(i)
print(i+1)
for(i in increments ){
print(i)
print(i+1)
}
for(i in increments ){
print(i)
print(i+5)
}
print(paste("my example query", toString(i),":",toString(i+5),"[dp]"))
modifier <- paste0( toString(i),":",toString(i+5),"[dp]")
print(paste("my example query", modifier))
epmc_modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
database = 'pmc'
if(database == "pmc") { modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5)) }
database = 'pubmed'
if(database == "pmc") { modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5)) }
if(database == "pmc") { modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5)) }
database = 'pubmed'
if(database == "pmc") { modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5)) }
database = 'pubmed'
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
database = "PMC"
database = tolower(database)
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
print(paste("my example query", modifier))
}
database= 'pubmed'
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
print(paste("my example query", modifier))
}
quickKAF <- function(queryString, databaseString){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(retrieved$pmid) < 500 | is.na(retrieved)) { stop("Not enough observations in these half-decade: n < 500")}
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.01, 0.75, 0.005)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
}
quickKAF <- function(queryString, databaseString){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(retrieved$pmid) < 500 | is.na(retrieved)) { stop("Not enough observations in these half-decade: n < 500")}
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.01, 0.75, 0.005)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
return(rules)
}
current_year <- format(Sys.Date(),"%Y")
increments <- seq(1950,current_year, by = 5)
mother_Df <- data.frame()
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste("cancer", modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
databaseString <- database
current_year <- format(Sys.Date(),"%Y")
increments <- seq(1950,current_year, by = 5)
mother_Df <- data.frame()
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste("cancer", modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
quickKAF <- function(queryString, databaseString){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(retrieved$pmid) < 500 | length(retrieved) = 0) { stop("Not enough observations in these half-decade: n < 500")}
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste("cancer", modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
quickKAF <- function(queryString, databaseString){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(retrieved$pmid) < 500 | length(retrieved) = 0) {
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste("cancer", modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
quickKAF <- function(queryString, databaseString){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.01, 0.75, 0.005)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
return(rules)
}
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste("cancer", modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
K
tempKAF <- function(query, database, venv, lang_model) {
database = tolower(database)
databaseString <- database
#creating history
current_year <- format(Sys.Date(),"%Y")
increments <- seq(1950,current_year, by = 5)
mother_Df <- data.frame()
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste(query, modifier)
iteration_df <- quickKAF(queryString, databaseString)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
return(mother_Df)
}
lets_see <- tempKAF("cancer", "pubmed", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
quickKAF <- function(queryString, databaseString, venv, lang_model){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.01, 0.75, 0.005)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
return(rules)
}
tempKAF <- function(query, database, venv, lang_model) {
database = tolower(database)
databaseString <- database
#creating history
current_year <- format(Sys.Date(),"%Y")
increments <- seq(1950,current_year, by = 5)
mother_Df <- data.frame()
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:",toString(i),"-",toString(i+5))
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste(query, modifier)
iteration_df <- quickKAF(queryString, databaseString, venv, lang_model)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
return(mother_Df)
}
lets_see <- tempKAF("cancer", "pubmed", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
check <- info_retrieval("cancer 1950:1955[dp]", 1000, 'pubmed')
View(check)
check <- info_retrieval("cancer 1955:1960[dp]", 1000, 'pubmed')
View(check)
length(which(!is.na(check$abstract)))
check <- info_retrieval("cancer 1960:1965[dp]", 1000, 'pubmed')
length(which(!is.na(check$abstract)))
check <- info_retrieval("cancer 1965:1970[dp]", 1000, 'pubmed')
length(which(!is.na(check$abstract)))
check <- info_retrieval("cancer 1980:1985[dp]", 1000, 'pubmed')
length(which(!is.na(check$abstract)))
check <- info_retrieval("cancer 1985:1990[dp]", 1000, 'pubmed')
length(which(!is.na(check$abstract)))
rules <- data.frame(LHS = NA, RHS = NA, support = NA, confidence = NA, coverage = NA, lift = NA, count = NA)
View(rules)
quickKAF <- function(queryString, databaseString, venv, lang_model){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(which(!is.na(retrieved$abstract))) < 500 ){
rules <- data.frame(LHS = NA, RHS = NA, support = NA, confidence = NA, coverage = NA, lift = NA, count = NA)
} else {
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.01, 0.75, 0.005)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
}
return(rules)
}
lets_see <- tempKAF("cancer", "pubmed", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(mother_Df)
lets_see <- tempKAF("cancer", "pmc", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
modifier <- paste0("PUB_YEAR:[",toString(i),"TO",toString(i+5),"]")
modifier <- paste0("PUB_YEAR:[",toString(i)," TO ",toString(i+5),"]")
tempKAF <- function(query, database, venv, lang_model) {
database = tolower(database)
databaseString <- database
#creating history
current_year <- format(Sys.Date(),"%Y")
increments <- seq(1950,current_year, by = 5)
mother_Df <- data.frame()
for(i in increments ){
#creating string modifiers that account for each database
if(database == "pmc") {
modifier <- paste0("PUB_YEAR:[",toString(i)," TO ",toString(i+5),"]")
} else if(database == "pubmed") {
modifier <- paste0( toString(i),":",toString(i+5),"[dp]") }
queryString <- paste(query, modifier)
iteration_df <- quickKAF(queryString, databaseString, venv, lang_model)
# using add_column()
iterated_df <- iteration_df %>% add_column(year = i)
mother_Df <- c(mother_Df,iterated_df)
}
return(mother_Df)
}
lets_see <- tempKAF("cancer", "pmc", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
quickKAF <- function(queryString, databaseString, venv, lang_model){
# 1. retrieving
source("Information_Retrieval.R")
retrieved <- info_retrieval(query = queryString, how_many_articles = 1000,  database = databaseString)
if(length(which(!is.na(retrieved$abstract))) < 500 ){
rules <- data.frame(LHS = NA, RHS = NA, support = NA, confidence = NA, coverage = NA, lift = NA, count = NA)
} else {
# 2. parsing
source("NLP.R")
preProcessed <- Text_Parser(retrieved, venv = venv, lang_model =  lang_model, reduced_search = 0.2)
# 3. mining
source("Apriori_ARM_tool.R")
rules <- ARM(preProcessed, 0.10, 0.75, 0.001)
#filt_rules <- which(small_rules$lift <= 2)
#rules <- rules[-filt_rules,]
}
return(rules)
}
lets_see <- tempKAF("cancer", "pmc", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(lets_see)
mother <- list2DF(lets_see)
lets_see <- tempKAF("cancer", "pmc", venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(lets_see)
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
source("easyKAF.R")
rm(list = ls())
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
source("easyKAF.R")
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(rules)
clean_rules <- MeSH_finalizer(rules, removal = "study")
viz <- ruleViewer(clean_rules, "bar", "bme")
viz
viz <- ruleViewer(clean_rules, "df", "techniques")
View(viz)
viz <- ruleViewer(clean_rules, "df", "unlab")
viz <- ruleViewer(clean_rules, "df", "unlab")
View(viz)
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(rules)
clean_rules <- MeSH_finalizer(rules, removal = "study")
viz <- ruleViewer(clean_rules, "bar", "bme")
viz
viz <- ruleViewer(clean_rules, "df", "dizziness")
viz <- ruleViewer(clean_rules, "df", "diseases")
View(viz)
viz <- ruleViewer(clean_rules, "df", "unlab")
View(viz)
source("Visualization.R")
viz <- ruleViewer(clean_rules, "bar", "bme")
viz
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
View(rules)
viz <- ruleViewer(clean_rules, "bar", "bme")
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
clean_rules <- MeSH_finalizer(rules, removal = c("study","lead"))
source("MeSH_Classification.R")
clean_rules <- MeSH_finalizer(rules, removal = c("study","lead"))
clean_rules <- MeSH_finalizer(rules, removal = c("study","lead","±"))
viz <- ruleViewer(clean_rules, "bar", "bme")
viz
viz <- ruleViewer(clean_rules, "bar", "techniques")
viz
viz <- ruleViewer(clean_rules, "df", "bme")
viz <- ruleViewer(clean_rules, "df", "unlab")
viz
View(viz)
view(viz[which(viz$RHS == "{plexus}"),])
viz[which(viz$RHS == "{plexus}"),])
viz[which(viz$RHS == "{plexus}"),]
viz[which(viz$RHS == "{traction}"),]
viz[which(viz$RHS == "{traction}"),]
traction
viz[which(viz$RHS == "{traction}"),]
rules <- easyKAF(venv = "C:\\Users\\Chris\\venv\\mar6", lang_model = "en_core_web_sm")
clean_rules <- MeSH_finalizer(rules, removal = c("study","lead","±"))
rm(list = ls())
